// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	transaction "ecommerce/features/transaction"

	mock "github.com/stretchr/testify/mock"
)

// TransactionData is an autogenerated mock type for the TransactionData type
type TransactionData struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: userID
func (_m *TransactionData) CreateTransaction(userID uint) (transaction.Core, error) {
	ret := _m.Called(userID)

	var r0 transaction.Core
	if rf, ok := ret.Get(0).(func(uint) transaction.Core); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(transaction.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields:
func (_m *TransactionData) UpdateTransaction() (transaction.Core, error) {
	ret := _m.Called()

	var r0 transaction.Core
	if rf, ok := ret.Get(0).(func() transaction.Core); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(transaction.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionData interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionData creates a new instance of TransactionData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionData(t mockConstructorTestingTNewTransactionData) *TransactionData {
	mock := &TransactionData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
