// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	transaction "ecommerce/features/transaction"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// CancelTransaction provides a mock function with given fields: token, transactionID
func (_m *TransactionService) CancelTransaction(token interface{}, transactionID uint) error {
	ret := _m.Called(token, transactionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, transactionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: token, paymentLink, codeTrans
func (_m *TransactionService) CreateTransaction(token interface{}, paymentLink string, codeTrans string) (transaction.Core, error) {
	ret := _m.Called(token, paymentLink, codeTrans)

	var r0 transaction.Core
	if rf, ok := ret.Get(0).(func(interface{}, string, string) transaction.Core); ok {
		r0 = rf(token, paymentLink, codeTrans)
	} else {
		r0 = ret.Get(0).(transaction.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, string, string) error); ok {
		r1 = rf(token, paymentLink, codeTrans)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionDetail provides a mock function with given fields: token, transactionID
func (_m *TransactionService) TransactionDetail(token interface{}, transactionID uint) (interface{}, error) {
	ret := _m.Called(token, transactionID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}, uint) interface{}); ok {
		r0 = rf(token, transactionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint) error); ok {
		r1 = rf(token, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionHistory provides a mock function with given fields: token
func (_m *TransactionService) TransactionHistory(token interface{}) ([]transaction.Core, error) {
	ret := _m.Called(token)

	var r0 []transaction.Core
	if rf, ok := ret.Get(0).(func(interface{}) []transaction.Core); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransaction provides a mock function with given fields: codeTrans
func (_m *TransactionService) UpdateTransaction(codeTrans string) (transaction.Core, error) {
	ret := _m.Called(codeTrans)

	var r0 transaction.Core
	if rf, ok := ret.Get(0).(func(string) transaction.Core); ok {
		r0 = rf(codeTrans)
	} else {
		r0 = ret.Get(0).(transaction.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(codeTrans)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService(t mockConstructorTestingTNewTransactionService) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
