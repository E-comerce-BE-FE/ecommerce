openapi: 3.0.3
info:
  title: E - Commerce
  description: This is API for Group Project By Alterra Academy
  version: "1.0.0"
  contact:
    email: fauzilax@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: register
    description: Endpoint for user registration
  - name: login
    description: Endpoint for verifying who a user is
  - name: logout
  - name: search
    description: Endpoint for find users
  - name: users
    description: Endpoint for perform operations on user
  - name: products
    description: Endpoint to perform operations on user product
  - name: carts
    description: Endpoint for perform operations on cart
  - name: transactions
    description: Endpoint to perform operations on transaction
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/fauzilax/E-Commerce/1.0.0
  - url: https://shirayuki.site
    description: primarry link

paths:
  /register:
    post:
      tags:
        - register
      description: feature for user registration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:  
                  type: string
                password:
                  type: string
                  format: password
            example:
              name: "Fauzi Sofyan"
              email: "fauzilax@gmail.com"
              phone: "0813456"
              password: "123"
      responses:
        201: 
          description: "success insert data"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Success create account"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /login:
    post:
      tags:
        - "login"
      summary: login account
      description: feature for verifying who a user is
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                password:
                  type: string
                  format: password
              example: 
                email: "fauzilax@gmail.com"
                password: "123"
      responses:
        200:
          description: "success login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseObject'
              example:
                data: 
                  id: 1
                  name: "Fauzi Sofyan"
                  email: "fauzilax@gmail.com"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJ1c2VySUQiOjR9.QTZxERh4CwC_UnL_eJvTi_A_qdLeBZ-IjR4nqoxjodk"
                message: "login success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    
  /users:
    get:
      tags: 
        - users
      summary: get data user by id user
      description: getting data user by id user
      security: 
        - JWTAuth: []
      responses:
        200:
          description: success show profile
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 2
                    name: "Griffin"
                    profilepicture: "https://res.cloudinary.com/dbg0177wd/image/upload/v1673881607/go-cloudinary/llhltxp55elirjkmlyld.png"
                    product: [{
                      product_id: 1,
                      product_name: "Pepsodent",
                      stock: 30,
                      price: 12000,
                      description: "Pasta gigi yang mengandung bahan mint membuat mulut lebih fresh dan merawat gigi lebih maximal dengan kandungan mint yang sangat baik",
                      product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/lifebuoy_lifebuoy-sabun-batangan_full02.jpg"
                      },
                      {
                      product_id: 2,
                      product_name: "Lifeboy",
                      stock: 20,
                      price: 10000,
                      description: "Sabun lifeboy dapat memberikan kulit menjadi lebih cerah dan lembut",
                      product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg"
                      }]
                  message: "success show profile"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    put:
      tags:
        - users
      summary: update profile
      description: Update user profile
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:  
                  type: string
                address:  
                  type: string
                password:
                  type: string
                  format: password
            example: 
              name: "Griffin"
              email: "griffin@gmail.com"
              phone: "08123456"
              address: "Makassar"
              password: "123"
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            example:
              image: "https://res.cloudinary.com/dbg0177wd/image/upload/v1673881607/go-cloudinary/llhltxp55elirjkmlyld.png"
      responses:
        200:
          description: update success
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id : 2
                  name: "Griffin"
                  email: "griffin@gmail.com"
                  phone: "08123456"
                  address: "Makassar"
                  password: "123"
                  image: "https://res.cloudinary.com/dbg0177wd/image/upload/v1673881607/go-cloudinary/llhltxp55elirjkmlyld.png"
                message: "update profile success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    delete:
      tags:
        - users
      summary: delete data user
      description: delete data from user
      security:
        - JWTAuth: []
      responses:
        200:
          description: deleted user success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "delete data user success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
          
  /products:
    post:
      tags:
        - products
      description: feature for user create new product
      security:
        - JWTAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                stock:  
                  type: string
                price:
                  type: string
                description:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            example:
              product_name: "Pepsodent"
              stock: 30
              price: 12000
              description: "Pasta gigi yang mengandung bahan mint membuat mulut lebih fresh dan merawat gigi lebih maximal dengan kandungan mint yang sangat baik"
              product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg"
              
      responses:
        201: 
          description: "success insert product"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Success create account"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    get:
      tags:
        - products
      summary: show homepage
      description: feature for show all product in homepage
      responses:
        200:
          description: success show all product
          content:
            application/json:
              schema:
                type: object
                example:
                  data: [{
                    id: 1,
                    product_name: "Pepsodent",
                    address: "Makassar",
                    price: 12000,
                    product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg",
                    },
                    {
                    id: 2,
                    product_name: "Lifeboy",
                    address: "Makassar",
                    price: 10000,
                    product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg",
                    }]
                  message: "success show all product"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
  
  /products/{product_id}:
    get:
      tags:
        - products
      summary: show detail product
      description: feature for show detail product
      parameters:
        - name: product_id
          description: product_id
          required: true
          in: path
          schema:
            type: string
            example: 1
      responses:
        200:
          description: success show product
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    product_name: "Pepsodent"
                    address: "Makassar"
                    price: 12000,
                    product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg"
                    user: {
                      user_id: 2,
                      name: "Griffin",
                      address: "Makassar",
                      profilepicture: "https://res.cloudinary.com/dbg0177wd/image/upload/v1673881607/go-cloudinary/llhltxp55elirjkmlyld.png"
                    }
    put:
      tags:
        - products
      description: feature for user create new product
      security:
        - JWTAuth: []
      parameters:
        - name: product_id
          description: product_id
          required: true
          in: path
          schema:
            type: string
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_name:
                  type: string
                stock:  
                  type: string
                price:
                  type: string
                description:
                  type: string
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            example:
              product_name: "Cheetos"
              stock: 50
              price: 5000
              description: "Dengan rasa jagung alami membuat makanan menjadi gurih dan enak untuk dinikmati"
              product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/53264112-73f6-4da4-8cd2-dcdab668dfb9.jpg"
      responses:
        200:
          description: update success
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  product_name: "Cheetos"
                  stock: 50
                  price: 5000
                  description: "Dengan rasa jagung alami membuat makanan menjadi gurih dan enak untuk dinikmati"
                  product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/53264112-73f6-4da4-8cd2-dcdab668dfb9.jpg"
                message: "update product success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - products
      description: delete from product
      security:
        - JWTAuth: []
      parameters:
        - name: product_id
          description: product_id
          required: true
          in: path
          schema:
            type: string
            example: 1
      responses:
        200:
          description: deleted product success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "delete product success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /carts/{product_id}:
    post:
      tags:
        - carts
      description: feature for user create new cart
      security:
        - JWTAuth: []
      parameters:
        - name: product_id
          description: product_id
          required: true
          in: path
          schema:
            type: string
            example: 1
      responses:
        201: 
          description: "success added to cart"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: "Success added"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    
  /carts:
    get:
      tags:
        - carts
      description: feature for user create new cart
      security:
        - JWTAuth: []
      responses:
        200:
          description: update success
          content:
            application/json:
              schema:
                type: object
              example:
                data: [{
                  id: 1,
                  product_name: "Pepsodent",
                  seller: "Griffin",
                  quantity: 3,
                  amount: 12000,
                  product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg",
                  },
                  {
                  id: 2,
                  product_name: "Lifeboy",
                  seller: "Griffin",
                  quantity: 2,
                  amount: 10000,
                  product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg",
                  }]
                message: "Success show cart"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    
  /carts/{cart_id}:
    put:
      tags:
        - carts
      description: feature for user update qty product
      security:
        - JWTAuth: []
      parameters:
        - name: cart_id
          description: cart_id
          required: true
          in: path
          schema:
            type: string
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                update_qty:
                  type: integer
      responses:
        200:
          description: update success
          content:
            application/json:
              schema:
                type: object
              example:
                message: update quantity succes
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'
    
    delete:
      tags:
        - carts
      description: feature for user delete product from cart
      security:
        - JWTAuth: []
      parameters:
        - name: cart_id
          description: cart_id
          required: true
          in: path
          schema:
            type: string
            example: 1  
      responses:
        200:
          description: deleted cart success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "delete cart success"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /transactions:
    post:
      tags:
        - transactions
      description: feature for user create new cart
      security:
        - JWTAuth: []
      responses:
        201: 
          description: "success added transaction"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                data:
                  id: 1
                  seller: "Griffin"
                  total_product: 5
                  total_amount: 56000
                  status: "pending"
                  create_at: "23-01-2023 22:10:15"
                  transaction_code: "isj82j1wd"
                message: "Success added"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    get:
      tags:
        - transactions
      summary: transaction history
      description: feature for user create new cart
      security:
        - JWTAuth: []
      responses:
        200: 
          description: "success show transaction"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                data: [{
                  id: 1,
                  seller: "Griffin",
                  total_product: 5,
                  subtotal: 56000,
                  status: "pending",
                  create_at: "23-01-2023 22:10:15",
                  transaction_code: "isj82j1wd",
                  },
                  {
                  id: 2,
                  seller: "Griffin",
                  total_product: 10,
                  subtotal: 100000,
                  status: "success",
                  create_at: "23-01-2023 22:10:15",
                  transaction_code: "isj82j1wd",
                  },
                  {
                  id: 3,
                  seller: "Griffin",
                  total_product: 5,
                  subtotal: 60000,
                  status: "cancelled",
                  create_at: "23-01-2023 22:10:15",
                  transaction_code: "isj82j1wd",
                  }]
                message: "Success added"
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

  /transactions/{transaction_id}:
    get:
      tags:
        - transactions
      summary: show detail transaction
      description: feature for show detail transactions
      security:
        - JWTAuth: []
      parameters:
        - name: transaction_id
          description: transaction_id
          required: true
          in: path
          schema:
            type: string
            example: 1  
      responses:
        200: 
          description: "success show transaction"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                data: [{
                  transaction_id: 1,
                  product_name: "Pepsodent",
                  seller: "Griffin",
                  quantity: 3,
                  amount: 36000,
                  product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg",
                  },
                  {
                  transaction_id: 1,
                  product_name: "Lifeboy",
                  seller: "Griffin",
                  quantity: 2,
                  amount: 20000,
                  product_image: "https://fauziawsbucket.s3.ap-southeast-1.amazonaws.com/3c8d7d6f76fcae16c934ac00b305bb25.jpg",
                  }]
        400:
          $ref: '#/components/responses/400'
        500:
          $ref: '#/components/responses/500'

    put:
      tags:
        - transactions
      summary: midtrans process
      description: feature for update transaction status
      security:
        - JWTAuth: []
      parameters:
        - name: transaction_id
          description: transaction_id
          required: true
          in: path
          schema:
            type: string
            example: 1 
      responses:
        200: 
          description: "success update transaction status"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                data:
                  transaction_status: success
                message: "Update transaction status success"


components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "user token"
  schemas:
    responseObject:
      type: object
      properties:
        data:
          type: object
        message:
          type: string
    responseObjectArr:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        message:
          type: string
  responses:
    400:
      description: "error from user"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Bad request"
    500:
      description: "error from server"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Internal server error"
